#!nsh
#
# PX4FMU startup script.

#
# Default to auto-start mode.  An init script on the microSD card
# can change this to prevent automatic startup of the flight script.
#
set MODE autostart

set logfile /fs/microsd/bootlog.txt

#
# Try to mount the microSD card.
#
echo "[init] looking for microSD..."
if mount -t vfat /dev/mmcsd0 /fs/microsd
then
	echo "[init] card mounted at /fs/microsd"
	# Start playing the startup tune
	tone_alarm start
else
	echo "[init] no microSD card found"
	# Play SOS
	tone_alarm error
fi

#
# Look for an init script on the microSD card.
#
# To prevent automatic startup in the current flight mode,
# the script should set MODE to some other value.
#
if [ -f /fs/microsd/etc/rc ]
then
	echo "[init] reading /fs/microsd/etc/rc"
	sh /fs/microsd/etc/rc
fi
# Also consider rc.txt files
if [ -f /fs/microsd/etc/rc.txt ]
then
	echo "[init] reading /fs/microsd/etc/rc.txt"
	sh /fs/microsd/etc/rc.txt
fi

# if this is an APM build then there will be a rc.APM script
# from an EXTERNAL_SCRIPTS build option
if [ -f /etc/init.d/rc.APM ]
then
	if sercon
	then
		echo "[init] USB interface connected"
	fi

	echo "[init] Running rc.APM"
	# if APM startup is successful then nsh will exit
	sh /etc/init.d/rc.APM
fi

if [ $MODE == autostart ]
then
	#
	# Start CDC/ACM serial driver
	#
	sercon
	
	#
	# Start the ORB (first app to start)
	#
	uorb start
	
	#
	# Load microSD params
	#
	#if ramtron start
	#then
	#	param select /ramtron/params
	#	if [ -f /ramtron/params ]
	#	then
	#		param load /ramtron/params
	#	fi
	#else
		param select /fs/microsd/params
		if [ -f /fs/microsd/params ]
		then
			if param load /fs/microsd/params
			then
				echo "[init] Parameters loaded"
			else
				echo "[init] Parameter file corrupt - ignoring"
			fi
		fi
	#fi
	
	#
	# Start system state indicator
	#
	if rgbled start
	then
		echo "[init] Using external RGB Led"
	else
		if blinkm start
		then
			blinkm systemstate
		fi
	fi

	# Use FMU PWM output by default
	set OUTPUT_MODE fmu_pwm
	set IO_PRESENT no
	
	#
	# Upgrade PX4IO firmware
	#
	if [ -f /etc/extras/px4io-v2_default.bin ]
	then
		set io_file /etc/extras/px4io-v2_default.bin
	else
		set io_file /etc/extras/px4io-v1_default.bin
	fi

	if px4io checkcrc $io_file
	then
		echo "[init] PX4IO CRC OK"
		echo "PX4IO CRC OK" >> $logfile

		set IO_PRESENT yes
		
		# If PX4IO present, use it as primary PWM output by default
		set OUTPUT_MODE io_pwm
	else
		echo "[init] PX4IO CRC failure"
		echo "PX4IO CRC failure" >> $logfile
		tone_alarm MBABGP
		if px4io forceupdate 14662 $io_file
		then
			usleep 500000
			if px4io start
			then
				echo "[init] PX4IO restart OK"
				echo "PX4IO restart OK" >> $logfile
				tone_alarm MSPAA

				set IO_PRESENT yes

				# If PX4IO present, use it as primary PWM output by default
				set OUTPUT_MODE io_pwm
			else
				echo "[init] PX4IO restart failed"
				echo "PX4IO restart failed" >> $logfile
				if hw_ver compare PX4FMU_V2
				then
					tone_alarm MNGGG
					sleep 10
					reboot
				fi
			fi
		else
			echo "[init] PX4IO update failed"
			echo "PX4IO update failed" >> $logfile
			if hw_ver compare PX4FMU_V2
			then
				tone_alarm MNGGG
			fi
		fi
	fi
	
	set HIL no
	set FRAME_TYPE none
	set PWM_RATE none
	set PWM_DISARMED none
	set PWM_MIN none
	set PWM_MAX none
	
	set EXIT_ON_END no
	
	if param compare SYS_AUTOCONFIG 1
	then
		set DO_AUTOCONFIG yes
	else
		set DO_AUTOCONFIG no
	fi
	
	#
	# Start the Commander (needs to be this early for in-air-restarts)
	#
	commander start
	
	#
	# Set parameters and env variables for selected AUTOSTART
	#
	sh /etc/init.d/rc.autostart

	# Custom configuration
	if [ -f /fs/microsd/etc/rc.conf ]
	then
		sh /fs/microsd/etc/rc.conf
	fi

	if [ $HIL == yes ]
	then
		set OUTPUT_MODE hil
	else
		# Try to get an USB console if not in HIL mode
		nshterm /dev/ttyACM0 &
	fi
	
	#
	# If autoconfig parameter was set, reset it and save parameters
	#
	if [ $DO_AUTOCONFIG == yes ]
	then
		param set SYS_AUTOCONFIG 0
		param save
	fi

	if [ $MODE == autostart ]
	then	
		#
		# Start primary output
		#
		if [ $OUTPUT_MODE == io_pwm ]
		then
			echo "[init] Use PX4IO PWM as primary output"
			if px4io start
			then
				echo "[init] PX4IO OK"
				echo "PX4IO OK" >> $logfile
				sh /etc/init.d/rc.io
			else
				echo "[init] PX4IO start error"
				echo "PX4IO start error" >> $logfile
				tone_alarm MNGGG
			fi
		fi
		if [ $OUTPUT_MODE == fmu_pwm ]
		then
			echo "[init] Use PX4FMU PWM as primary output"
			fmu mode_pwm
		fi
		if [ $OUTPUT_MODE == mkblctrl ]
		then
			echo "[init] Use MKBLCTRL as primary output"
		    mkblctrl
		fi		
		if [ $OUTPUT_MODE == hil ]
		then
			echo "[init] Use HIL as primary output"
			hil mode_pwm
		fi
		
		#
		# Start PX4IO as secondary output if needed
		#
		if [ $IO_PRESENT == yes -a $OUTPUT_MODE != io_pwm ]
		then
			echo "[init] Use PX4IO PWM as secondary output"
			if px4io start
			then
				echo "[init] PX4IO OK"
				echo "PX4IO OK" >> $logfile
				sh /etc/init.d/rc.io
			else
				echo "[init] PX4IO start error"
				echo "PX4IO start error" >> $logfile
				tone_alarm MNGGG
			fi
		fi

		#
		# MAVLink
		#
		if [ $OUTPUT_MODE == fmu_pwm -a hw_ver compare PX4FMU_V1 ]
		then
			# Start MAVLink on ttyS0, because FMU ttyS1 pins configured as PWM output
			mavlink start -d /dev/ttyS0
			usleep 5000
			
			# Exit from nsh to free port for mavlink
			set EXIT_ON_END yes
		else
			# Start MAVLink on default port: ttyS1
			mavlink start
			usleep 5000
		fi
		
		#
		# Sensors, Logging, GPS
		#
		echo "[init] Start sensors"
		sh /etc/init.d/rc.sensors

		if [ $HIL == no ]
		then
			echo "[init] Start logging"
			sh /etc/init.d/rc.logging
		fi

		if [ $HIL == no ]
		then
			echo "[init] Start GPS"
			gps start
		fi
		
		#
		# Fixed wing setup
		#
		if [ $VEHICLE_TYPE == fw ]
		then
			echo "[init] Vehicle type: FIXED WING"
			
			# Load mixer and configure outputs
			sh /etc/init.d/rc.fw_interface
			
			# Start standard fixedwing apps
			sh /etc/init.d/rc.mc_apps
		fi
	
		#
		# Multicopters setup
		#
		if [ $VEHICLE_TYPE == mc ]
		then
			echo "[init] Vehicle type: MULTICOPTER"
			
			# Load mixer and configure outputs
			sh /etc/init.d/rc.mc_interface
			
			# Start standard multicopter apps
			sh /etc/init.d/rc.mc_apps
		fi

		#
		# Generic setup (autostart ID not found)
		#
		if [ $VEHICLE_TYPE == none ]
		then
			echo "[init] Vehicle type: GENERIC"
			attitude_estimator_ekf start
			position_estimator_inav start
		fi
	fi

	# Start any custom extensions
	if [ -f /fs/microsd/etc/rc.local ]
	then
		sh /fs/microsd/etc/rc.local
	fi

	if [ $EXIT_ON_END == yes ]
	then
		exit
	fi

# End of autostart
fi
