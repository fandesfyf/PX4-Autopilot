@###############################################
@#
@# PX4 ROS compatible message source code
@# generation for C++
@#
@# EmPy template for generating <msg>.h files
@# Based on the original template for ROS
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - file_name_in (String) Source file
@#  - spec (msggen.MsgSpec) Parsed specification of the .msg file
@#  - md5sum (String) MD5Sum of the .msg specification
@#  - search_path (dict) search paths for genmsg
@#  - topics (List of String) multi-topic names
@###############################################
/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file @file_name_in */

@{
import genmsg.msgs
import gencpp

uorb_struct = '%s_s'%spec.short_name
topic_name = spec.short_name

type_map = {
  'int8': 'int8_t',
  'int16': 'int16_t',
  'int32': 'int32_t',
  'int64': 'int64_t',
  'uint8': 'uint8_t',
  'uint16': 'uint16_t',
  'uint32': 'uint32_t',
  'uint64': 'uint64_t',
  'float32': 'float',
  'float64': 'double',
  'bool': 'bool',
  'char': 'char',
}

msgtype_size_map = {
  'int8': 1,
  'int16': 2,
  'int32': 4,
  'int64': 8,
  'uint8': 1,
  'uint16': 2,
  'uint32': 4,
  'uint64': 8,
  'float32': 4,
  'float64': 8,
  'bool': 1,
  'char': 1,
}

def convert_type(spec_type):
    bare_type = spec_type
    if '/' in spec_type:
        # removing prefix
        bare_type = (spec_type.split('/'))[1]

    msg_type, is_array, array_length = genmsg.msgs.parse_type(bare_type)
    c_type = msg_type
    if msg_type in type_map:
        c_type = type_map[msg_type]
    if is_array:
        return c_type + "[" + str(array_length) + "]"
    return c_type

def bare_name(msg_type):
    bare = msg_type
    if '/' in msg_type:
        # removing prefix
        bare = (msg_type.split('/'))[1]
    # removing suffix
    return bare.split('[')[0]

def sizeof_field_type(field):
    bare_name_str = bare_name(field.type)
    if bare_name_str in msgtype_size_map:
        return msgtype_size_map[bare_name_str]
    return 0 # this is for non-builtin types: sort them at the end

def get_children_fields(base_type):
    (package, name) = genmsg.names.package_resource_name(base_type)
    tmp_msg_context = genmsg.msg_loader.MsgContext.create_default()
    spec_temp = genmsg.msg_loader.load_msg_by_type(tmp_msg_context, '%s/%s' %(package, name), search_path)  
    sorted_fields = sorted(spec_temp.parsed_fields(), key=sizeof_field_type, reverse=True)
    return sorted_fields

# Add padding fields before the embedded types, at the end and calculate the
# struct size
def add_padding_bytes(fields):
  struct_size = 8 # account for the timestamp
  align_to = 8 # this is always 8, because of the 64bit timestamp
  i = 0
  padding_idx = 0
  while i < len(fields):
    field = fields[i]
    if not field.is_header:
        a_pos = field.type.find('[')
        array_size = 1
        if field.is_array:
            array_size = field.array_len
        if field.is_builtin:
            field.sizeof_field_type = sizeof_field_type(field)
        else:
            # embedded type: may need to add padding
            num_padding_bytes = align_to - (struct_size % align_to)
            if num_padding_bytes != align_to:
                padding_field = genmsg.Field('_padding'+str(padding_idx),
                    'uint8['+str(num_padding_bytes)+']')
                padding_idx += 1
                padding_field.sizeof_field_type = 1
                struct_size += num_padding_bytes
                fields.insert(i, padding_field)
                i += 1
            children_fields = get_children_fields(field.base_type)
            field.sizeof_field_type, unused = add_padding_bytes(children_fields)
        struct_size += field.sizeof_field_type * array_size
    i += 1

  # add padding at the end (necessary for embedded types)
  num_padding_bytes = align_to - (struct_size % align_to)
  if num_padding_bytes == align_to:
      num_padding_bytes = 0
  else:
      padding_field = genmsg.Field('_padding'+str(padding_idx),
          'uint8['+str(num_padding_bytes)+']')
      padding_idx += 1
      padding_field.sizeof_field_type = 1
      struct_size += num_padding_bytes
      fields.append(padding_field)
  return (struct_size, num_padding_bytes)

sorted_fields = sorted(spec.parsed_fields(), key=sizeof_field_type, reverse=True)
struct_size, padding_end_size = add_padding_bytes(sorted_fields)
topic_fields = ["%s %s" % (convert_type(field.type), field.name) for field in sorted_fields]
}@

#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <uORB/topics/@(topic_name).h>


@# join all msg files in one line e.g: "float[3] position;float[3] velocity;bool armed"
const char *__orb_@(topic_name)_fields = "@( topic_name.upper() ):@( ";".join(topic_fields) );";

@[for multi_topic in topics]@
ORB_DEFINE(@multi_topic, struct @uorb_struct, @(struct_size-padding_end_size),
    __orb_@(topic_name)_fields);
@[end for]
