@###############################################
@#
@# PX4 ROS compatible message source code
@# generation for C++
@#
@# EmPy template for generating <msg>.h files
@# Based on the original template for ROS
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - file_name_in (String) Source file
@#  - spec (msggen.MsgSpec) Parsed specification of the .msg file
@#  - md5sum (String) MD5Sum of the .msg specification
@###############################################
/****************************************************************************
 *
 *   Copyright (C) 2013-2015 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file @file_name_in */

@{
import genmsg.msgs
import gencpp

uorb_struct = '%s_s'%spec.short_name
topic_name = spec.short_name
}@

#pragma once

@##############################
@# Generic Includes
@##############################
#include <stdint.h>
#include <uORB/uORB.h>

@##############################
@# Includes for dependencies
@##############################
@{
for field in spec.parsed_fields():
  if (not field.is_builtin):
    if (not field.is_header):
      (package, name) = genmsg.names.package_resource_name(field.base_type)
      package = package or spec.package # convert '' to package
      print('#include <uORB/topics/%s.h>'%(name))
}@

@# Constants c style
#ifndef __cplusplus
@[for constant in spec.constants]@
#define @(constant.name) @(int(constant.val))
@[end for]
#endif

@##############################
@# Main struct of message
@##############################
@{
type_map = {
  'int8': 'int8_t',
  'int16': 'int16_t',
  'int32': 'int32_t',
  'int64': 'int64_t',
  'uint8': 'uint8_t',
  'uint16': 'uint16_t',
  'uint32': 'uint32_t',
  'uint64': 'uint64_t',
  'float32': 'float',
  'float64': 'double',
  'bool': 'bool',
  'char': 'char',
  'fence_vertex': 'fence_vertex',
  'position_setpoint': 'position_setpoint',
  'esc_report': 'esc_report'
}

msgtype_size_map = {
  'int8': 8,
  'int16': 16,
  'int32': 32,
  'int64': 64,
  'uint8': 8,
  'uint16': 16,
  'uint32': 32,
  'uint64': 64,
  'float32': 32,
  'float64': 64,
  'bool': 1,
  'char': 1,
  'fence_vertex': 8,
  'position_setpoint': 104,
  'esc_report': 36
}

def bare_name(msg_type):
    bare = msg_type
    if '/' in msg_type:
        # removing prefix
        bare = (msg_type.split('/'))[1]
    # removing suffix
    return bare.split('[')[0]

def sizeof_field_type(field):
    return msgtype_size_map[bare_name(field.type)]

# Function to print a standard ros type
def print_field_def(field):
  type_name = field.type
  # detect embedded types
  sl_pos = type_name.find('/')
  type_appendix = ''
  type_prefix = ''
  if (sl_pos >= 0):
    type_name = type_name[sl_pos + 1:]
    type_prefix = 'struct '
    type_appendix = '_s'

  # detect arrays
  a_pos = type_name.find('[')
  array_size = ''
  if (a_pos >= 0):
    # field is array
    array_size = type_name[a_pos:]
    type_name = type_name[:a_pos]

  if type_name in type_map:
    # need to add _t: int8 --> int8_t
    type_px4 = type_map[type_name]
  else:
    raise Exception("Type {0} not supported, add to to template file!".format(type_name))

  print('\t%s%s%s %s%s;'%(type_prefix, type_px4, type_appendix, field.name, array_size))

def print_parsed_fields():
  # sort fields
  sorted_fields = sorted(spec.parsed_fields(), key = sizeof_field_type, reverse=True)
  # loop over all fields and print the type and name
  for field in sorted_fields:
    if (not field.is_header):
      print_field_def(field)

}@

// #pragma pack(push, 1)
ORBPACKED(
#ifdef __cplusplus
@#class @(uorb_struct) {
struct __EXPORT @(uorb_struct) {
@#public:
#else
struct @(uorb_struct) {
#endif
@# timestamp at the beginning of each topic is required for logger
	uint64_t timestamp; // required for logger
@print_parsed_fields()
#ifdef __cplusplus
@# Constants again c++-ified
@{
for constant in spec.constants:
  type_name = constant.type
  if type_name in type_map:
    # need to add _t: int8 --> int8_t
    type_px4 = type_map[type_name]
  else:
    raise Exception("Type {0} not supported, add to to template file!".format(type_name))

  print('\tstatic const %s %s = %s;'%(type_px4, constant.name, int(constant.val)))
}
#endif
});
//#pragma pack(pop)

/* register this as object request broker structure */
@[for multi_topic in topics]@
ORB_DECLARE(@multi_topic);
@[end for]
