diff --git a/src/include/mavlink/mavlink_log.h b/src/include/mavlink/mavlink_log.h
index 4ba2f98..a7b664e 100644
--- a/src/include/mavlink/mavlink_log.h
+++ b/src/include/mavlink/mavlink_log.h
@@ -106,10 +106,11 @@ __EXPORT void mavlink_vasprintf(int _fd, int severity, const char *fmt, ...);
  * @param _fd		A file descriptor returned from open(MAVLINK_LOG_DEVICE, 0);
  * @param _text		The text to log;
  */
-#define mavlink_and_console_log_emergency(_fd, _text, ...)		mavlink_vasprintf(_fd, MAVLINK_IOC_SEND_TEXT_EMERGENCY, _text, ##__VA_ARGS__); \
-									fprintf(stderr, "telem> "); \
+#define mavlink_and_console_log_emergency(_fd, _text, ...)		mavlink_vasprintf(_fd, MAVLINK_IOC_SEND_TEXT_EMERGENCY, _text, ##__VA_ARGS__);
+/*									fprintf(stderr, "telem> "); \
 									fprintf(stderr, _text, ##__VA_ARGS__); \
 									fprintf(stderr, "\n");
+*/
 
 /**
  * Send a mavlink critical message and print to console.
@@ -117,10 +118,11 @@ __EXPORT void mavlink_vasprintf(int _fd, int severity, const char *fmt, ...);
  * @param _fd		A file descriptor returned from open(MAVLINK_LOG_DEVICE, 0);
  * @param _text		The text to log;
  */
-#define mavlink_and_console_log_critical(_fd, _text, ...)		mavlink_vasprintf(_fd, MAVLINK_IOC_SEND_TEXT_CRITICAL, _text, ##__VA_ARGS__); \
-									fprintf(stderr, "telem> "); \
+#define mavlink_and_console_log_critical(_fd, _text, ...)		mavlink_vasprintf(_fd, MAVLINK_IOC_SEND_TEXT_CRITICAL, _text, ##__VA_ARGS__)
+/*									fprintf(stderr, "telem> "); \
 									fprintf(stderr, _text, ##__VA_ARGS__); \
 									fprintf(stderr, "\n");
+*/
 
 /**
  * Send a mavlink emergency message and print to console.
@@ -128,11 +130,11 @@ __EXPORT void mavlink_vasprintf(int _fd, int severity, const char *fmt, ...);
  * @param _fd		A file descriptor returned from open(MAVLINK_LOG_DEVICE, 0);
  * @param _text		The text to log;
  */
-#define mavlink_and_console_log_info(_fd, _text, ...)			mavlink_vasprintf(_fd, MAVLINK_IOC_SEND_TEXT_INFO, _text, ##__VA_ARGS__); \
-									fprintf(stderr, "telem> "); \
+#define mavlink_and_console_log_info(_fd, _text, ...)			mavlink_vasprintf(_fd, MAVLINK_IOC_SEND_TEXT_INFO, _text, ##__VA_ARGS__);
+/*									fprintf(stderr, "telem> "); \
 									fprintf(stderr, _text, ##__VA_ARGS__); \
 									fprintf(stderr, "\n");
-
+*/
 struct mavlink_logmessage {
 	char text[MAVLINK_LOG_MAXLEN + 1];
 	unsigned char severity;
diff --git a/src/lib/eigen b/src/lib/eigen
--- a/src/lib/eigen
+++ b/src/lib/eigen
@@ -1 +1 @@
-Subproject commit e7850ed81f9c469e02df496ef09ae32ec0379b71
+Subproject commit e7850ed81f9c469e02df496ef09ae32ec0379b71-dirty
diff --git a/src/modules/commander/PreflightCheck.cpp b/src/modules/commander/PreflightCheck.cpp
index bbf5f8e..50c7d8b 100644
--- a/src/modules/commander/PreflightCheck.cpp
+++ b/src/modules/commander/PreflightCheck.cpp
@@ -378,6 +378,14 @@ bool preflightCheck(int mavlink_fd, bool checkMag, bool checkAcc, bool checkGyro
 		}
 	}
 
+
+#ifdef __PX4_QURT
+	// WARNING: Preflight checks are important and should be added back when
+	// all the sensors are supported
+	PX4_WARN("WARNING: Preflight checks PASS always.");
+	failed = false;
+#endif
+
 	/* Report status */
 	return !failed;
 }
diff --git a/src/modules/commander/commander.cpp b/src/modules/commander/commander.cpp
index 971e086..c165322 100644
--- a/src/modules/commander/commander.cpp
+++ b/src/modules/commander/commander.cpp
@@ -1836,8 +1836,13 @@ int commander_thread_main(int argc, char *argv[])
 		}
 
 		/* RC input check */
+#ifndef __PX4_QURT
 		if (!(status.rc_input_mode == vehicle_status_s::RC_IN_MODE_OFF) && !status.rc_input_blocked && sp_man.timestamp != 0 &&
-		    hrt_absolute_time() < sp_man.timestamp + (uint64_t)(rc_loss_timeout * 1e6f)) {
+		   hrt_absolute_time() < sp_man.timestamp + (uint64_t)(rc_loss_timeout * 1e6f)) {
+#else
+		// HACK: remove old data check due to timestamp issue in QURT
+		if (!(status.rc_input_mode == vehicle_status_s::RC_IN_MODE_OFF) && !status.rc_input_blocked && sp_man.timestamp != 0 ) {
+#endif
 			/* handle the case where RC signal was regained */
 			if (!status.rc_signal_found_once) {
 				status.rc_signal_found_once = true;
@@ -2526,7 +2531,7 @@ set_control_mode()
 	/* set vehicle_control_mode according to set_navigation_state */
 	control_mode.flag_armed = armed.armed;
 	control_mode.flag_external_manual_override_ok = (!status.is_rotary_wing && !status.is_vtol);
-	control_mode.flag_system_hil_enabled = status.hil_state == vehicle_status_s::HIL_STATE_ON;
+	//control_mode.flag_system_hil_enabled = status.hil_state == vehicle_status_s::HIL_STATE_ON;
 	control_mode.flag_control_offboard_enabled = false;
 
 	switch (status.nav_state) {
diff --git a/src/modules/position_estimator_inav/position_estimator_inav_main.c b/src/modules/position_estimator_inav/position_estimator_inav_main.c
index 892e50f..7ac6776 100644
--- a/src/modules/position_estimator_inav/position_estimator_inav_main.c
+++ b/src/modules/position_estimator_inav/position_estimator_inav_main.c
@@ -384,7 +384,13 @@ int position_estimator_inav_thread_main(int argc, char *argv[])
 	};
 
 	/* wait for initial baro value */
+#ifdef __PX4_QURT
+	// WARNING skipping
+	PX4_WARN("Hacked to skip baro initialization for testing.");
+	bool wait_baro = false;
+#else
 	bool wait_baro = true;
+#endif
 
 	thread_running = true;
 
diff --git a/src/modules/sensors/sensors.cpp b/src/modules/sensors/sensors.cpp
index 3fa4458..0ef1883 100644
--- a/src/modules/sensors/sensors.cpp
+++ b/src/modules/sensors/sensors.cpp
@@ -1099,7 +1099,12 @@ Sensors::gyro_poll(struct sensor_combined_s &raw)
 		raw.gyro_raw[1] = gyro_report.y_raw;
 		raw.gyro_raw[2] = gyro_report.z_raw;
 
+#ifdef __PX4_QURT
+// Temporary fix required due to lack of time sync between apps and dsp cores
+		raw.timestamp = hrt_absolute_time();
+#else
 		raw.timestamp = gyro_report.timestamp;
+#endif
 		raw.gyro_errcount = gyro_report.error_count;
 		raw.gyro_temp = gyro_report.temperature;
 	}
@@ -2068,6 +2073,7 @@ Sensors::task_main()
 
 	/* start individual sensors */
 	int ret = 0;
+#if 0
 	do { /* create a scope to handle exit with break */
 		ret = accel_init();
 		if (ret) break;
@@ -2091,7 +2097,7 @@ Sensors::task_main()
 		}
 		return;
 	}
-
+#endif
 	/*
 	 * do subscriptions
 	 */
diff --git a/src/systemcmds/mixer/mixer.cpp b/src/systemcmds/mixer/mixer.cpp
index 83a9378..ec86faf 100644
--- a/src/systemcmds/mixer/mixer.cpp
+++ b/src/systemcmds/mixer/mixer.cpp
@@ -118,6 +118,8 @@ load(const char *devname, const char *fname)
 		return 1;
 	}
 
+#ifndef __PX4_QURT
+
 	if (load_mixer_file(fname, &buf[0], sizeof(buf)) < 0) {
 		warnx("can't load mixer: %s", fname);
 		return 1;
@@ -125,6 +127,24 @@ load(const char *devname, const char *fname)
 
 	/* XXX pass the buffer to the device */
 	int ret = px4_ioctl(dev, MIXERIOCLOADBUF, (unsigned long)buf);
+#else
+        char newbuf[] =
+          "R: 4x 10000 10000 10000 0\n"
+          "M: 1\n"
+          "O: 10000 10000 0 -10000 10000\n"
+          "S: 0 4 10000 10000 0 -10000 10000\n"
+          "M: 1\n"
+          "O: 10000 10000 0 -10000 10000\n"
+          "S: 0 5 10000 10000 0 -10000 10000\n"
+          "M: 1\n"
+          "O: 10000 10000 0 -10000 10000\n"
+          "S: 0 6 10000 10000 0 -10000 10000\n"
+          "M: 1\n"
+          "O: 10000 10000 0 -10000 10000\n"
+          "S: 0 7 10000 10000 0 -10000 10000\n";
+	/* XXX pass the buffer to the device */
+	int ret = px4_ioctl(dev, MIXERIOCLOADBUF, (unsigned long)newbuf);
+#endif
 
 	if (ret < 0) {
 		warnx("error loading mixers from %s", fname);
